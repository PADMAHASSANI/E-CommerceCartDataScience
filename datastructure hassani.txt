#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Define the Product struct
typedef struct Product {
    int id;
    char name[50];
    float price;
} Product;

// Define the CartItem struct (linked list of cart items)
typedef struct CartItem {
    Product product;
    int quantity;
    struct CartItem* next;
} CartItem;

// Define the Order struct (linked list of orders)
typedef struct Order {
    int orderId;
    char status[20];
    CartItem* items;  // Linked list of items in the order
    struct Order* next;
} Order;

// Function to view order history
void viewOrderHistory(Order* orderHistory) {
    if (orderHistory == NULL) {
        printf("No order history.\n");
        return;
    }
    printf("\nOrder History:\n");
    while (orderHistory != NULL) {
        printf("Order ID: %d, Status: %s\n", orderHistory->orderId, orderHistory->status);
        CartItem* items = orderHistory->items;
        while (items != NULL) {
            printf("\tID: %d, Name: %s, Price: $%.2f, Quantity: %d\n",
                   items->product.id, items->product.name, items->product.price, items->quantity);
            items = items->next;
        }
        orderHistory = orderHistory->next;
    }
}

// Function to track a shipment by order ID
void trackShipment(Order* orderHistory, int orderId) {
    while (orderHistory != NULL) {
        if (orderHistory->orderId == orderId) {
            printf("Order ID: %d, Status: %s\n", orderHistory->orderId, orderHistory->status);
            return;
        }
        orderHistory = orderHistory->next;
    }
    printf("Order not found.\n");
}

// Helper function to create a new product
Product createProduct(int id, const char* name, float price) {
    Product product;
    product.id = id;
    strcpy(product.name, name);
    product.price = price;
    return product;
}

// Helper function to add an item to an order
CartItem* addItemToOrder(CartItem* head, Product product, int quantity) {
    CartItem* newItem = (CartItem*)malloc(sizeof(CartItem));
    newItem->product = product;
    newItem->quantity = quantity;
    newItem->next = head;
    return newItem;
}

// Helper function to create a new order
Order* createOrder(int orderId, const char* status, CartItem* items) {
    Order* newOrder = (Order*)malloc(sizeof(Order));
    newOrder->orderId = orderId;
    strcpy(newOrder->status, status);
    newOrder->items = items;
    newOrder->next = NULL;
    return newOrder;
}

int main() {
    Order* orderHistory = NULL;  // Initialize an empty order history
    int choice, id, quantity, orderId;
    float price;
    char name[50], status[20];
    CartItem* items = NULL;

    while (1) {
        printf("\nMenu:\n");
        printf("1. Add Product to Order\n");
        printf("2. Create Order\n");
        printf("3. View Order History\n");
        printf("4. Track Shipment\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                // Add a product to the current order (cart)
                printf("Enter product ID: ");
                scanf("%d", &id);
                printf("Enter product name: ");
                scanf("%s", name);
                printf("Enter product price: ");
                scanf("%f", &price);
                printf("Enter quantity: ");
                scanf("%d", &quantity);

                // Create product and add to the order (cart)
                items = addItemToOrder(items, createProduct(id, name, price), quantity);
                printf("Product added to the cart.\n");
                break;

            case 2:
                // Create a new order
                printf("Enter order ID: ");
                scanf("%d", &orderId);
                printf("Enter order status: ");
                scanf("%s", status);

                // Create a new order and add it to the order history
                if (orderHistory == NULL) {
                    orderHistory = createOrder(orderId, status, items);
                } else {
                    Order* newOrder = createOrder(orderId, status, items);
                    newOrder->next = orderHistory;
                    orderHistory = newOrder;
                }

                items = NULL;  // Reset the cart for a new order
                printf("Order created successfully.\n");
                break;

            case 3:
                // View the order history
                viewOrderHistory(orderHistory);
                break;

            case 4:
                // Track a shipment by order ID
                printf("Enter order ID to track: ");
                scanf("%d", &orderId);
                trackShipment(orderHistory, orderId);
                break;

            case 5:
                // Exit the program
                printf("Exiting...\n");
                return 0;

            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}
